{"version":3,"sources":["components/Form.js","App.js","reportWebVitals.js","index.js"],"names":["Form","props","onSubmit","event","a","preventDefault","setState","loading","generatedURL","validateInput","generatedKey","nanoid","state","preferedAlias","db","getDatabase","set","ref","longURL","then","result","catch","e","hasError","key","errors","indexOf","handleChange","target","id","value","prevState","errorMessages","errorMessage","length","push","isWebUri","checkKeyExists","exists","dbRef","get","child","error","copyToClipBoard","navigator","clipboard","writeText","toolTipMessage","className","autoComplete","onChange","this","type","required","placeholder","htmlFor","suggestedAlias","onClick","role","disabled","OverlayTrigger","placement","overlay","Tooltip","title","React","Component","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b53195c8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { nanoid } from 'nanoid'\r\nimport { getDatabase, child, ref, set, get } from \"firebase/database\";\r\nimport { isWebUri } from 'valid-url';\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\r\nimport Tooltip from \"react-bootstrap/Tooltip\";\r\n\r\n\r\nclass Form extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            longURL: '',\r\n            preferedAlias: '',\r\n            generatedURL: '',\r\n            loading: false,\r\n            errors: [],\r\n            errorMessage: {},\r\n            toolTipMessage: 'Copy To Clip Board'\r\n        };\r\n\r\n    }\r\n\r\n    //When the user clicks submit, this will be called\r\n    onSubmit = async (event) => {\r\n        event.preventDefault(); //Prevents the page from reloading when submit is clicked\r\n        this.setState({\r\n            loading: true,\r\n            generatedURL: ''\r\n        })\r\n\r\n        // Validate the input the user has sumbitted\r\n        var isFormValid = await this.validateInput()\r\n        if (!isFormValid) {\r\n            return\r\n        }\r\n\r\n        //If the user has input a prefered alias then we use it, if not, we generate one\r\n        var generatedKey = nanoid(5);\r\n        var generatedURL = \"URLShrinkr.com/\" + generatedKey\r\n\r\n        if (this.state.preferedAlias !== '') {\r\n            generatedKey = this.state.preferedAlias\r\n            generatedURL = \"URLShrinkr.com/\" + this.state.preferedAlias\r\n        }\r\n\r\n        const db = getDatabase();\r\n        set(ref(db, '/' + generatedKey), {\r\n\r\n            generatedKey: generatedKey,\r\n            longURL: this.state.longURL,\r\n            preferedAlias: this.state.preferedAlias,\r\n            generatedURL: generatedURL\r\n\r\n        }).then((result) => {\r\n            this.setState({\r\n                generatedURL: generatedURL,\r\n                loading: false\r\n            })\r\n        }).catch((e) => {\r\n\r\n        })\r\n    };\r\n\r\n    //Checks if feild has an error\r\n    hasError = (key) => {\r\n        return this.state.errors.indexOf(key) !== -1;\r\n    }\r\n\r\n\r\n    //Save the content of the form as the user is typing!\r\n    handleChange = (e) => {\r\n        const { id, value } = e.target\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            [id]: value\r\n        }))\r\n    }\r\n\r\n\r\n\r\n    validateInput = async () => {\r\n        var errors = [];\r\n        var errorMessages = this.state.errorMessage\r\n\r\n        //Validate Long URL\r\n        if (this.state.longURL.length === 0) {\r\n            errors.push(\"longURL\");\r\n            errorMessages['longURL'] = 'Please enter your URL!';\r\n        } else if (!isWebUri(this.state.longURL)) {\r\n            errors.push(\"longURL\");\r\n            errorMessages['longURL'] = 'Please a URL in the form of https://www....';\r\n        }\r\n\r\n        //Prefered Alias\r\n        if (this.state.preferedAlias !== '') {\r\n            if (this.state.preferedAlias.length > 7) {\r\n                errors.push(\"suggestedAlias\");\r\n                errorMessages['suggestedAlias'] = 'Please Enter an Alias less than 7 Characters';\r\n            } else if (this.state.preferedAlias.indexOf(' ') >= 0) {\r\n                errors.push(\"suggestedAlias\");\r\n                errorMessages['suggestedAlias'] = 'Spaces are not allowed in URLS';\r\n            }\r\n\r\n            var keyExists = await this.checkKeyExists()\r\n\r\n            if (keyExists.exists()) {\r\n                errors.push(\"suggestedAlias\");\r\n                errorMessages['suggestedAlias'] = 'The Alias you have entered already exists! Please enter another one =-)';\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            errors: errors,\r\n            errorMessages: errorMessages,\r\n            loading: false\r\n        });\r\n\r\n        if (errors.length > 0) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    checkKeyExists = async () => {\r\n        const dbRef = ref(getDatabase());\r\n        return get(child(dbRef, `/${this.state.preferedAlias}`)).catch((error) => {\r\n            return false\r\n        });\r\n    }\r\n\r\n    copyToClipBoard = () => {\r\n        navigator.clipboard.writeText(this.state.generatedURL)\r\n        this.setState({\r\n            toolTipMessage: 'Copied!'\r\n        })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container-fluid\">\r\n                <form autoComplete=\"off\">\r\n                    <h3 className=\"shrinkr-title\">URLShrinkr!</h3>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label>Enter Your Long URL</label>\r\n                        <input\r\n                            id=\"longURL\"\r\n                            onChange={this.handleChange}\r\n                            value={this.state.longURL}\r\n                            type=\"url\"\r\n                            required\r\n                            className={\r\n                                this.hasError(\"longURL\")\r\n                                    ? \"form-control is-invalid\"\r\n                                    : \"form-control\"\r\n                            }\r\n                            placeholder=\"https://www...\"\r\n                        />\r\n                    </div>\r\n                    <div\r\n                        className={\r\n                            this.hasError(\"longURL\") ? \"text-danger\" : \"visually-hidden\"\r\n                        }\r\n                    >\r\n                        {this.state.errorMessage.longURL}\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"basic-url\">Your URL To Be Shrunk</label>\r\n                        <div className=\"input-group mb-3\">\r\n                            <div className=\"input-group-prepend\">\r\n                                <span className=\"input-group-text\">URLShrinkr.com/</span>\r\n                            </div>\r\n                            <input\r\n                                id=\"preferedAlias\"\r\n                                onChange={this.handleChange}\r\n                                value={this.state.preferedAlias}\r\n                                className={\r\n                                    this.hasError(\"preferedAlias\")\r\n                                        ? \"form-control is-invalid\"\r\n                                        : \"form-control\"\r\n                                }\r\n                                type=\"text\" placeholder=\"eg. abcde5 (Optional)\"\r\n                            />\r\n                        </div>\r\n                        <div\r\n                            className={\r\n                                this.hasError(\"suggestedAlias\") ? \"text-danger\" : \"visually-hidden\"\r\n                            }\r\n                        >\r\n                            {this.state.errorMessage.suggestedAlias}\r\n                        </div>\r\n                    </div>\r\n\r\n                        \r\n                    <button className=\"btn btn-primary\" type=\"button\" onClick={this.onSubmit}>\r\n                        {\r\n                            this.state.loading ?\r\n                                <div>\r\n                                    <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n                                </div> :\r\n                                <div>\r\n                                    <span className=\"visually-hidden spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n                                    <span>URLShrinkr</span>\r\n                                </div>\r\n                        }\r\n\r\n                    </button>\r\n\r\n                    {\r\n                        this.state.generatedURL === '' ?\r\n                            <div></div>\r\n                            :\r\n                            <div className=\"generatedurl\">\r\n                                <span>Your generated URL is: </span>\r\n                                <div className=\"input-group mb-3\">\r\n                                    <input disabled type=\"text\" value={this.state.generatedURL} className=\"form-control\" placeholder=\"Recipient's username\" aria-label=\"Recipient's username\" aria-describedby=\"basic-addon2\" />\r\n                                    <div className=\"input-group-append\">\r\n                                        <OverlayTrigger\r\n                                            key={'top'}\r\n                                            placement={'top'}\r\n                                            overlay={\r\n                                                <Tooltip id={`tooltip-${'top'}`}>\r\n                                                    {this.state.toolTipMessage}\r\n                                                </Tooltip>\r\n                                            }\r\n                                        >\r\n                                            <button onClick={() => this.copyToClipBoard()} data-toggle=\"tooltip\" data-placement=\"top\" title=\"Tooltip on top\" className=\"btn btn-outline-secondary\" type=\"button\">Copy</button>\r\n\r\n                                        </OverlayTrigger>\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                    }\r\n\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;","import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport Form from \"./components/Form\";\r\n\r\nfunction App() {\r\n  return (<Router>\r\n    <div className=\"App\">\r\n      <div className=\"auth-wrapper\">\r\n        <div className=\"auth-inner\">\r\n          <Switch>\r\n            <Route exact path='/' component={Form} />\r\n            <Route path=\"/app\" component={Form} />\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    </div></Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { initializeApp } from \"firebase/app\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAjWQrV3ybSY7GJF2sT1b8TUsSb_at92qE\",\r\n  authDomain: \"urlshrinkr.firebaseapp.com\",\r\n  projectId: \"urlshrinkr\",\r\n  storageBucket: \"urlshrinkr.appspot.com\",\r\n  messagingSenderId: \"51282170592\",\r\n  appId: \"1:51282170592:web:7d9fee043e0b2812e6b685\",\r\n  measurementId: \"G-LN1C42BM0E\"\r\n};\r\n\r\n\r\ninitializeApp(firebaseConfig);\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}